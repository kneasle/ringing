//! Representation of a [`Composition`] generated by Monument.

use std::{
    cell::RefCell,
    collections::{HashMap, HashSet},
    hash::Hash,
    rc::Rc,
    sync::{Arc, Mutex},
};

use bellframe::{music::AtRowPositions, Bell, Block, Mask, Row, RowBuf, Stage, Stroke, Truth};
use itertools::Itertools;

use crate::{
    parameters::{
        Call, CallDisplayStyle, CallId, CallIdx, MethodId, MethodIdx, MethodVec, MusicTypeVec,
        Parameters, SpliceStyle,
    },
    utils::{
        lengths::{PerPartLength, TotalLength},
        Boundary,
    },
    PartHead,
};

#[allow(unused_imports)] // Used by doc comments
use crate::{
    parameters::{Method, MusicType},
    Search,
};

/// A [`Composition`] generated by Monument.
#[derive(Debug, Clone)]
pub struct Composition {
    pub(crate) id: CompositionId,
    pub(crate) stage: Stage,
    pub(crate) start_stroke: Stroke,
    pub(crate) path: Vec<PathElem>,

    // Cached values which don't change, even if a different set of params are used
    pub(crate) unique_place_bell_rows_per_bell: Vec<usize>, // TODO: Type-safe bell-vec
    pub(crate) truth: Truth,
    pub(crate) length: TotalLength,
    pub(crate) end_row: RowBuf,
    pub(crate) part_head: RowBuf,
}

/// A piece of a [`Composition`]
#[derive(Debug, Clone, PartialEq, Eq, Hash)]
pub(crate) struct PathElem {
    pub start_row: RowBuf,
    pub method_id: MethodId,
    pub start_sub_lead_idx: usize,
    pub length: PerPartLength,
    pub call_to_end: Option<CallId>,
}

impl Composition {
    pub(crate) fn new(
        id: CompositionId,
        path: Vec<PathElem>,
        part_head: PartHead,
        cache: &CompCacheWithParams,
    ) -> Self {
        let block = cache.block(&path);
        Self {
            id,
            stage: cache.params.stage,
            start_stroke: cache.params.start_stroke,
            path,

            truth: block.truth(),
            part_head: cache.params.part_head_group.get_row(part_head).to_owned(),
            unique_place_bell_rows_per_bell: Self::unique_place_bell_rows_per_bell(&block),
            end_row: cache.params.end_row.clone(),
            length: TotalLength::new(block.len()),
        }
    }

    fn unique_place_bell_rows_per_bell(block: &Block<(MethodId, usize)>) -> Vec<usize> {
        // Collect which (place bell, method, sub-lead-idx) triples are rung by each bell
        let mut place_bell_rows: Vec<HashSet<(u8, MethodId, usize)>> =
            vec![HashSet::new(); block.stage().num_bells()];
        for (&(method_id, sub_lead_idx), row) in block.annot_rows() {
            for (place, bell) in row.bell_iter().enumerate() {
                place_bell_rows[bell.index()].insert((place as u8, method_id, sub_lead_idx));
            }
        }
        // Return the sizes of these sets
        place_bell_rows
            .into_iter()
            .map(|set| set.len())
            .collect_vec()
    }
}

impl PathElem {
    pub fn ends_with_plain(&self) -> bool {
        self.call_to_end.is_none()
    }

    pub(crate) fn end_sub_lead_idx(&self, params: &Parameters) -> usize {
        params
            .get_method(self.method_id)
            .add_sub_lead_idx(self.start_sub_lead_idx, self.length)
    }

    /// Returns true if going from `self` to `next` would be considered a 'splice'
    fn is_splice_when_followed_by(&self, next: &Self, params: &Parameters) -> bool {
        let is_continuation = self.method_id == next.method_id
            && self.end_sub_lead_idx(params) == next.start_sub_lead_idx;
        !is_continuation
    }

    fn lead_head(&self, method_map: &HashMap<MethodId, MethodData>) -> RowBuf {
        let row_in_first_lead = method_map[&self.method_id]
            .double_plain_course
            .get_row(self.start_sub_lead_idx)
            .unwrap();
        &self.start_row * !row_in_first_lead
    }
}

#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]
pub struct CompositionId(pub u32);

impl From<u32> for CompositionId {
    fn from(value: u32) -> Self {
        Self(value)
    }
}

impl From<CompositionId> for u32 {
    fn from(value: CompositionId) -> Self {
        value.0
    }
}

/////////////
// CACHING //
/////////////

type PerMusicTypeCache = Rc<RefCell<HashMap<CompositionId, AtRowPositions<usize>>>>;

/// Struct which caches expensive properties about [`Composition`]s, so that these values will be
/// calculated once and then re-used for future queries.
#[derive(Debug, Default)]
pub struct CompositionCache {
    per_param_cache: Option<(Parameters, PerParamCache)>,
    music_counts: HashMap<bellframe::MusicType, PerMusicTypeCache>,
}

#[derive(Debug, Default)]
struct PerParamCache {
    // TODO: Find a way of doing this without Arc<Mutex<T>>
    is_valid: Arc<Mutex<HashMap<CompositionId, bool>>>,
}

/// A variant of [`CompositionCache`] with extra cached data specific to the [`Parameters`].
///
/// Constructing a `CompCacheWithParams` is much more expensive than using it, so it is intended
/// to be constructed once and then applied to many [`Composition`]s.
#[derive(Debug)]
pub struct CompCacheWithParams<'params, 'cache> {
    params: &'params Parameters,

    /* DATA CACHED FROM PARAMS */
    method_map: HashMap<MethodId, MethodData>,
    call_map: HashMap<CallId, CallIdx>,
    working_bells: Vec<Bell>,
    /// Set of labels at which the composition can end.  I.e. these are labels which are also a
    /// valid `end_index` for some method.
    valid_end_labels: HashSet<String>,

    /* DATA BORROWED FROM COMP CACHE */
    per_param_cache: &'cache PerParamCache,
    // PERF: Push the RefCell out of here, so we don't have to keep checking for valid borrows
    music_counts: MusicTypeVec<PerMusicTypeCache>,
}

#[derive(Debug, Clone)]
struct MethodData {
    idx: MethodIdx,
    double_plain_course: Block<(MethodId, usize)>,
    lead_head_weights: Vec<(Mask, f32)>,
}

impl CompositionCache {
    pub fn with_params<'params, 'cache>(
        &'cache mut self,
        params: &'params Parameters,
    ) -> CompCacheWithParams<'params, 'cache> {
        CompCacheWithParams::new(self, params)
    }
}

impl<'params, 'cache> CompCacheWithParams<'params, 'cache> {
    fn new(cache: &'cache mut CompositionCache, params: &'params Parameters) -> Self {
        let CompositionCache {
            per_param_cache,
            music_counts,
        } = cache;

        Self {
            method_map: Self::method_map(params),
            call_map: Self::call_map(params),
            valid_end_labels: params.valid_end_labels(),
            working_bells: params.working_bells(),

            per_param_cache: Self::get_or_reset_per_param_cache(per_param_cache, params),
            music_counts: Self::get_music_count_caches(music_counts, params),
            params,
        }
    }

    fn get_or_reset_per_param_cache(
        cache: &'cache mut Option<(Parameters, PerParamCache)>,
        params: &Parameters,
    ) -> &'cache mut PerParamCache {
        // Create a new empty cache if the params changed
        let current_cached_params = cache.as_ref().map(|(params, _cache)| params);
        if current_cached_params != Some(params) {
            *cache = Some((params.clone(), PerParamCache::default()));
        }
        // Get the (possibly replaced) cache
        &mut cache.as_mut().unwrap().1
    }

    fn get_music_count_caches(
        counts: &mut HashMap<bellframe::MusicType, PerMusicTypeCache>,
        params: &Parameters,
    ) -> MusicTypeVec<PerMusicTypeCache> {
        let mut caches = MusicTypeVec::new();
        for mt in &params.music_types {
            let count_cache = Rc::clone(counts.entry(mt.inner.clone()).or_default());
            caches.push(count_cache);
        }
        caches
    }

    /// If every [`MethodId`] in this `Composition` is in the [`Parameters`], returns `Some(map)`
    /// where `map` maps [`MethodId`]s to their corresponding [`MethodIdx`].  Otherwise, returns
    /// `None`.
    fn method_map(params: &Parameters) -> HashMap<MethodId, MethodData> {
        let mut method_map = HashMap::new();
        for (idx, method) in params.methods.iter_enumerated() {
            let mut double_plain_course = method
                .plain_course()
                .map_annots(|annot| (method.id, annot.sub_lead_idx));
            double_plain_course.extend_from_within(..);
            method_map.insert(
                method.id,
                MethodData {
                    idx,
                    double_plain_course,
                    lead_head_weights: method.lead_head_weights(params),
                },
            );
        }
        method_map
    }

    fn call_map(params: &Parameters) -> HashMap<CallId, CallIdx> {
        params
            .calls
            .iter_enumerated()
            .map(|(idx, call)| (call.id, idx))
            .collect()
    }

    /// Return a [`Block`] containing the [`Row`]s in this composition.  Each [`Row`] is annotated
    /// with a `(method index, index within a lead)` pair.  For example, splicing a lead of Bastow
    /// into Cambridge Major would create a [`Block`] which starts like:
    ///
    /// ```text
    /// Block {
    ///     12345678: (<ID of Bastow>, 0),
    ///     21436587: (<ID of Bastow>, 1),
    ///     21345678: (<ID of Bastow>, 2),
    ///     12436587: (<ID of Bastow>, 3),
    ///     14263857: (<ID of Cambridge>, 0),
    ///     41628375: (<ID of Cambridge>, 1),
    ///     14682735: (<ID of Cambridge>, 2),
    ///     41867253: (<ID of Cambridge>, 3),
    ///     48162735: (<ID of Cambridge>, 4),
    ///        ...
    /// }
    /// ```
    ///
    /// If this `Composition` uses methods or calls which are not specified in the [`Parameters`],
    /// then `None` is returned.
    pub(crate) fn block(&self, path: &[PathElem]) -> Block<(MethodId, usize)> {
        // Generate the first part
        let mut first_part =
            Block::<(MethodId, usize)>::with_leftover_row(self.params.start_row.clone());
        for elem in path {
            assert_eq!(first_part.leftover_row(), elem.start_row.as_row());
            // Copy the corresponding part of this method's (double) plain course
            let double_plain_course = &self.method_map[&elem.method_id].double_plain_course;
            let start_idx = elem.start_sub_lead_idx;
            let end_idx = start_idx + elem.length.as_usize();
            first_part.extend_range(double_plain_course, start_idx..end_idx);
            // If this PathElem ends in a call, then change the `leftover_row` to suit
            if let Some(call_id) = elem.call_to_end {
                let last_non_leftover_row = first_part.rows().next_back().unwrap();
                let new_leftover_row =
                    last_non_leftover_row * self.get_call(call_id).place_notation.transposition();
                first_part.leftover_row_mut().copy_from(&new_leftover_row);
            }
        }

        // Generate the other parts from the first
        let part_len = first_part.len();
        let mut comp = first_part;
        for _ in 0..self.params.num_parts() - 1 {
            comp.extend_from_within(..part_len);
        }
        assert_eq!(comp.leftover_row(), &self.params.end_row);
        comp
    }

    fn get_method(&self, id: MethodId) -> &Method {
        &self.params.methods[self.method_map[&id].idx]
    }

    fn get_call(&self, id: CallId) -> &Call {
        &self.params.calls[self.call_map[&id]]
    }
}

//////////////////////
// CONSTRUCT GETTER //
//////////////////////

/// Struct which combines a [`Composition`] with a set of [`Parameters`] from which the extra data
/// is taken.
#[derive(Debug)]
pub struct CompositionValues<'comp> {
    composition: &'comp Composition,

    call_string: String,
    method_counts: MethodVec<TotalLength>,
    music_counts: MusicTypeVec<AtRowPositions<usize>>,
    music_score: f32,
    total_score: f32,
    atw_factor: f32,
}

//////////////////
// CONSTRUCTION //
//////////////////

impl CompCacheWithParams<'_, '_> {
    pub fn get_comp_values<'comp>(
        &self,
        comp: &'comp Composition,
    ) -> Option<CompositionValues<'comp>> {
        CompositionValues::new(comp, self)
    }
}

impl<'comp> CompositionValues<'comp> {
    fn new(composition: &'comp Composition, cache: &CompCacheWithParams) -> Option<Self> {
        let validity_cache = Arc::clone(&cache.per_param_cache.is_valid);
        // Sanity check that there should only be two `Arc`s for the validity cache (the one in
        // `cache`, and the one we just cloned).  If this is the case, then we are the only thread
        // to have access to the contained `Mutex` and therefore, since we drop one guard before
        // taking another, no deadlocks are possible.
        assert_eq!(Arc::strong_count(&validity_cache), 2);
        let is_valid = validity_cache.lock().unwrap().get(&composition.id).copied();
        match is_valid {
            Some(false) => None, // Known bad; reject
            Some(true) => {
                // Known good; construct but skip checks
                let v = Self::new_inner(composition, cache, true);
                assert!(v.is_some());
                v
            }
            None => {
                // Unknown; construct without skipping checks and save the result
                let getter = Self::new_inner(composition, cache, false);
                validity_cache
                    .lock()
                    .unwrap()
                    .insert(composition.id, getter.is_some());
                getter
            }
        }
    }

    fn new_inner(
        composition: &'comp Composition,
        cache: &CompCacheWithParams,
        known_good: bool,
    ) -> Option<Self> {
        // Do cheap checks before calculating anything.  This is useful because the search
        // algorithm produces tons of too-short compositions, so it's worth validating length
        // quickly and thus rejecting these.
        if !known_good && !Self::do_cheap_checks(composition, &cache.params) {
            return None;
        }

        // Once the cheap checks pass, compute useful cached values and build the `getter`
        let music_counts = composition.music_counts(cache);
        let music_score = music_counts_to_score(&music_counts, cache.params);
        // TODO: Cache these
        let call_string = composition.call_string(cache);
        let atw_factor = composition.atw_factor(cache);
        let total_score = composition.total_score(music_score, atw_factor, cache);
        let method_counts = composition.method_counts(cache);
        let mut values = Self {
            composition,

            call_string,
            method_counts,
            music_counts,
            music_score,
            atw_factor,
            total_score,
        };

        if !known_good && !values.do_non_cheap_checks(cache) {
            return None;
        }

        Some(values) // If all checks didn't find problems, the getter is valid
    }
}

impl Composition {
    /// Returns a factor in `0.0..=1.0` where 0.0 means nothing was rung and 1.0 means everything
    /// was rung (i.e. the composition is atw)
    fn atw_factor(&self, cache: &CompCacheWithParams) -> f32 {
        // Determine how many `(bell, place, method, sub-lead-idx)` quadruples are actually possible
        let total_unique_row_positions = cache.working_bells.len() // Working bells
            * cache.working_bells.len() // Working place bells
            * cache.params.methods.iter().map(|m| m.lead_len()).sum::<usize>();
        // Determine how many we actuall rang
        let run_unique_row_positions = cache
            .working_bells
            .iter()
            .map(|b| self.unique_place_bell_rows_per_bell[b.index()])
            .sum::<usize>();

        run_unique_row_positions as f32 / total_unique_row_positions as f32
    }

    /// The number of *instances* of each [`MusicType`] in the [`Parameters`].
    fn music_counts<'a>(&self, cache: &CompCacheWithParams) -> MusicTypeVec<AtRowPositions<usize>> {
        let mut cached_block: Option<Block<(MethodId, usize)>> = None;

        let mut counts = MusicTypeVec::new();
        for (idx, mt) in cache.params.music_types.iter_enumerated() {
            let count = *cache.music_counts[idx]
                .borrow_mut()
                .entry(self.id)
                .or_insert_with(|| {
                    if cached_block.is_none() {
                        cached_block = Some(cache.block(&self.path));
                    }
                    let block = cached_block.as_ref().unwrap();

                    mt.count(block, !self.start_stroke)
                });
            counts.push(count);
        }
        counts
    }

    /// The total score generated by this composition from all the different weights (music, calls,
    /// changes of method, handbell coursing, etc.).
    fn total_score(&self, music_score: f32, atw_factor: f32, cache: &CompCacheWithParams) -> f32 {
        let mut total_score = 0.0;
        // Music
        total_score += music_score;
        // ATW
        if let Some(atw_weight) = cache.params.atw_weight {
            total_score += atw_factor * atw_weight;
        }
        // Calls
        for elem in &self.path {
            if let Some(call_id) = elem.call_to_end {
                let call = cache.get_call(call_id);
                total_score += call.weight * cache.params.num_parts() as f32;
            }
        }
        // Splices
        let mut changes_of_method = 0;
        for (e1, e2) in self.path.iter().tuple_windows() {
            if e1.is_splice_when_followed_by(e2, cache.params) {
                changes_of_method += cache.params.num_parts();
            }
        }
        let first_elem = self.path.first().unwrap();
        let last_elem = self.path.last().unwrap();
        if last_elem.is_splice_when_followed_by(first_elem, cache.params) {
            // -1 because there's no splice around the end/start of the composition
            changes_of_method += cache.params.num_parts() - 1;
        }
        total_score += changes_of_method as f32 * cache.params.splice_weight;
        // Course weights
        // TODO: Cache this
        for elem in &self.path {
            let lead_head_weights = &cache.method_map[&elem.method_id].lead_head_weights;
            let lead_head = elem.lead_head(&cache.method_map);
            for part_head in self.part_head.closure() {
                let lead_head_in_part = part_head * &lead_head;
                for (mask, weight) in lead_head_weights {
                    if mask.matches(&lead_head_in_part) {
                        total_score += *weight * elem.length.as_usize() as f32;
                    }
                }
            }
        }
        total_score
    }

    /// Generate a human-friendly [`String`] summarising the calling of this composition.  For
    /// example, [this composition](https://complib.org/composition/87419) would have a
    /// `call_string` of `D[B]BL[W]N[M]SE[sH]NCYW[sH]`.
    pub fn call_string(&self, cache: &CompCacheWithParams) -> String {
        let params = &cache.params;

        let needs_brackets =
            params.is_spliced() || params.call_display_style == CallDisplayStyle::Positional;
        let is_snap_start = self.path[0].start_sub_lead_idx > 0;
        let is_snap_finish = self.path.last().unwrap().end_sub_lead_idx(params) > 0;

        let mut path_iter = self.path.iter().peekable();

        let mut s = String::new();
        if params.call_display_style == CallDisplayStyle::Positional {
            s.push('#');
        }
        s.push_str(if is_snap_start { "<" } else { "" });
        while let Some(path_elem) = path_iter.next() {
            // Method text
            if params.is_spliced() || params.call_display_style == CallDisplayStyle::Positional {
                // Add one shorthand for every lead *covered* (not number of lead heads reached)
                //
                // TODO: Deal with half-lead spliced
                let method = cache.get_method(path_elem.method_id);
                let num_leads_covered = num_leads_covered(
                    method.lead_len(),
                    path_elem.start_sub_lead_idx,
                    path_elem.length,
                );
                for _ in 0..num_leads_covered {
                    s.push_str(&method.shorthand());
                }
            }
            // Call text
            if let Some(call_id) = path_elem.call_to_end {
                let call = cache.get_call(call_id);
                s.push_str(if needs_brackets { "[" } else { "" });
                // Call position
                match params.call_display_style {
                    CallDisplayStyle::CallingPositions(calling_bell) => {
                        let row_after_call = path_iter
                            .peek()
                            .map_or(&self.part_head, |path_elem| &path_elem.start_row);
                        let place_of_calling_bell = row_after_call.place_of(calling_bell).unwrap();
                        let calling_position = &call.calling_positions[place_of_calling_bell];
                        s.push_str(call.short_symbol());
                        s.push_str(calling_position);
                    }
                    // TODO: Compute actual counts for positional calls
                    CallDisplayStyle::Positional => s.push_str(&call.symbol),
                }
                s.push_str(if needs_brackets { "]" } else { "" });
            }
        }
        s.push_str(if is_snap_finish { ">" } else { "" });

        s
    }

    /// A slice containing the number of [`Row`]s generated for each [`Method`] used in the
    /// [`Search`].  These are stored in the same order as the [`Method`]s.
    fn method_counts(&self, cache: &CompCacheWithParams) -> MethodVec<TotalLength> {
        let mut method_counts =
            index_vec::index_vec![TotalLength::ZERO; cache.params.methods.len()];
        for elem in &self.path {
            let idx = cache.method_map[&elem.method_id].idx;
            method_counts[idx] += elem.length.as_total(&cache.params.part_head_group);
        }
        method_counts
    }
}

////////////////
// VALIDATION //
////////////////

impl<'comp> CompositionValues<'comp> {
    /// Perform cheap checks on this composition which don't involve looking up methods or calls.
    /// The main reason to do this is to quickly reject compositions which are being generated by the
    /// search routine
    #[must_use]
    fn do_cheap_checks(composition: &Composition, params: &Parameters) -> bool {
        if composition.stage != params.stage {
            return false; // Stage mismatch
        }
        if !params.length.contains(&composition.length) {
            return false; // Length mismatch
        }
        if !params
            .part_head_group
            .is_row_generator(&composition.part_head)
        {
            return false; // Composition doesn't end in a valid part
        }
        if composition.path[0].start_row != params.start_row {
            return false; // Doesn't start in the right row
        }

        true // Can't reject composition this easily
    }

    fn do_non_cheap_checks(&mut self, cache: &CompCacheWithParams) -> bool {
        if !self.are_methods_satisfied(cache) {
            return false;
        }
        if !self.is_splice_style_satisfied(cache) {
            return false;
        }
        if cache.params.require_atw && !self.is_atw() {
            return false;
        }
        if cache.params.require_truth && !self.is_true() {
            return false; // Composition is false but we needed it to be true
        }
        if &self.composition.end_row != &cache.params.end_row {
            return false; // Comps ends on the wrong row
        }
        for (mt, counts) in cache.params.music_types.iter().zip_eq(&self.music_counts) {
            let total = mt.masked_total(*counts);
            if !mt.count_range.contains(total) {
                return false; // Music count range isn't satisfied
            }
        }
        // Start indices
        let first_elem = &self.composition.path[0];
        let start_indices = cache
            .get_method(first_elem.method_id)
            .wrapped_indices(Boundary::Start, cache.params);
        if !start_indices.contains(&first_elem.start_sub_lead_idx) {
            return false; // Composition couldn't start in this way
        }
        // End indices
        let last_elem = self.composition.path.last().unwrap();
        let end_sub_lead_idx = last_elem.end_sub_lead_idx(cache.params);
        match last_elem.call_to_end {
            None => {
                // The last element ends with a plain lead, so we need to check that this chunk's
                // end sub-lead index is valid
                let end_indices = cache
                    .get_method(last_elem.method_id)
                    .wrapped_indices(Boundary::End, cache.params);
                if !end_indices.contains(&end_sub_lead_idx) {
                    return false; // End index isn't valid for this method
                }
            }
            Some(call_id) => {
                // If the composition ends with a call, then the situation is more complex; we need
                // to check that the call leads to a method which could end immediately
                // (conceptually, this introduces an imaginary 0-length 'path-elem' at the end)
                let end_label = &cache.get_call(call_id).label_to;
                if !cache.valid_end_labels.contains(end_label) {
                    return false; // Call's label_to can't correspond to a valid end idx
                }
            }
        }
        // Check for continuity over the part head (this checks for cases like finishing each part
        // at a snap and then starting the next part at the lead-end)
        if cache.params.is_multipart() {
            let start_labels = cache
                .get_method(first_elem.method_id)
                .get_labels(first_elem.start_sub_lead_idx);
            let end_labels = cache
                .get_method(last_elem.method_id)
                .get_labels(end_sub_lead_idx);
            let is_splice_possible = start_labels.iter().any(|label| end_labels.contains(label));
            let is_continuous_lead = first_elem.start_sub_lead_idx == end_sub_lead_idx
                && first_elem.method_id == last_elem.method_id;
            if !is_splice_possible && !is_continuous_lead && last_elem.ends_with_plain() {
                return false; // No way to splice over the part heads
            }
            if first_elem.start_sub_lead_idx != end_sub_lead_idx {
                return false; // Composition isn't continuous over the part heads
            }
        }

        true // Composition is all OK
    }

    fn are_methods_satisfied(&self, cache: &CompCacheWithParams) -> bool {
        let allowed_lead_heads: MethodVec<Vec<Mask>> = cache
            .params
            .methods
            .iter()
            .map(|m| m.allowed_lead_head_masks(cache.params))
            .collect();

        for path_elem in &self.composition.path {
            let method_idx = cache.method_map[&path_elem.method_id].idx;
            // Check if lead head is valid
            let lead_head = path_elem.lead_head(&cache.method_map);
            if !allowed_lead_heads[method_idx]
                .iter()
                .any(|m| m.matches(&lead_head))
            {
                return false; // If no lead heads matched, this course isn't valid anymore
            }
        }

        // TODO: Check method ranges using refined lengths

        true
    }

    fn is_splice_style_satisfied(&self, cache: &CompCacheWithParams) -> bool {
        match cache.params.splice_style {
            SpliceStyle::LeadLabels => true, // Assume all comps are still valid
            SpliceStyle::Calls => {
                let is_invalid_splice = |e1: &PathElem, e2: &PathElem| -> bool {
                    // PERF: use the method map to speed up the splicing check
                    e1.is_splice_when_followed_by(e2, cache.params) && e1.ends_with_plain()
                };
                for (elem1, elem2) in self.composition.path.iter().tuple_windows() {
                    if is_invalid_splice(elem1, elem2) {
                        return false; // Splice but no call
                    }
                }
                if cache.params.is_multipart() && !self.composition.path.is_empty() {
                    let first = self.composition.path.first().unwrap();
                    let last = self.composition.path.last().unwrap();
                    if is_invalid_splice(last, first) {
                        return false; // Splice but no call over part head
                    }
                }
                true
            }
        }
    }

    /////////////
    // GETTERS //
    /////////////

    /// The number of [`Row`]s in this composition.
    pub fn length(&self) -> usize {
        self.composition.length.as_usize()
    }

    pub fn call_string(&self) -> &str {
        &self.call_string
    }

    pub fn part_head(&self) -> &Row {
        &self.composition.part_head
    }

    pub fn is_true(&self) -> bool {
        self.composition.truth.is_true()
    }

    /// The average score generated by each [`Row`] in this composition.  This is equal to
    /// `self.total_score() / self.length() as f32`.
    pub fn score_per_row(&self) -> f32 {
        self.total_score() / self.length() as f32
    }

    pub fn total_score(&self) -> f32 {
        self.total_score
    }

    pub fn is_atw(&self) -> bool {
        self.atw_factor() == 1.0
    }

    pub fn atw_factor(&self) -> f32 {
        self.atw_factor
    }

    pub fn music_score(&self) -> f32 {
        self.music_score
    }

    pub fn music_counts(&self) -> &MusicTypeVec<AtRowPositions<usize>> {
        &self.music_counts
    }

    pub fn method_counts(&self) -> &MethodVec<TotalLength> {
        &self.method_counts
    }
}

///////////
// UTILS //
///////////

fn music_counts_to_score(counts: &MusicTypeVec<AtRowPositions<usize>>, params: &Parameters) -> f32 {
    let mut music_score = 0.0;
    for (count, music_type) in counts.iter().zip_eq(&params.music_types) {
        music_score += music_type.as_overall_score(*count);
    }
    music_score
}

/// Return the number of leads covered by some [`Chunk`]
fn num_leads_covered(lead_len: usize, start_sub_lead_idx: usize, length: PerPartLength) -> usize {
    assert_ne!(length, PerPartLength::ZERO); // 0-length chunks shouldn't exist
    let dist_to_end_of_first_lead = lead_len - start_sub_lead_idx;
    let rows_after_end_of_first_lead = length.as_usize().saturating_sub(dist_to_end_of_first_lead);
    // `+ 1` for the first lead
    crate::utils::div_rounding_up(rows_after_end_of_first_lead, lead_len) + 1
}

#[cfg(test)]
mod tests {
    use crate::utils::lengths::PerPartLength;

    #[test]
    fn num_leads_covered() {
        assert_eq!(super::num_leads_covered(32, 0, PerPartLength::new(32)), 1);
        assert_eq!(super::num_leads_covered(32, 2, PerPartLength::new(32)), 2);
        assert_eq!(super::num_leads_covered(32, 2, PerPartLength::new(30)), 1);
        assert_eq!(super::num_leads_covered(32, 0, PerPartLength::new(2)), 1);
        assert_eq!(super::num_leads_covered(32, 16, PerPartLength::new(24)), 2);
    }
}
