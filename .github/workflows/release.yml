# This workflow is based on that of ripgrep:
#   https://github.com/BurntSushi/ripgrep/blob/0b36942f680bfa9ae88a564f2636aa8286470073/.github/workflows/release.yml

# The way this works is the following:
#
# The create-release job runs purely to initialize the GitHub release itself
# and to output upload_url for the following job.
#
# The build-release job runs only once create-release is finished. It gets the
# release upload URL from create-release job outputs, then builds the release
# executables for each supported platform and attaches them as release assets
# to the previously created release.
#
# The key here is that we create the release only once.
#
# Reference:
# https://eugene-babichenko.github.io/blog/2020/05/09/github-actions-cross-platform-auto-releases/

name: Release
on:
  push:
    # Enable when testing release infrastructure on a branch.
    # branches:
    # - release-workflow
    tags:
    - 'v*'

######################
# CREATE NEW RELEASE #
######################

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    env:
      # Uncomment to force version number, e.g., when no tag exists.
      # MONUMENT_VERSION: TEST-0.0.1
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    outputs:
      monument_version: ${{ env.MONUMENT_VERSION }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Get the release version from the tag
        if: env.MONUMENT_VERSION == ''
        shell: bash
        run: |
          # Apparently, this is the right way to get a tag name. Really?
          # See: https://github.community/t5/GitHub-Actions/How-to-get-just-the-tag-name/m-p/32167/highlight/true#M1027
          echo "MONUMENT_VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
          echo "version is: ${{ env.MONUMENT_VERSION }}"

      - name: Create GitHub release
        shell: bash
        run: |
          # Delete duplicate release if it exists
          if gh release view $MONUMENT_VERSION; then
            gh release delete $MONUMENT_VERSION
          fi

          gh release create $MONUMENT_VERSION --notes "Hello, $(git rev-parse HEAD --short)!"
          gh release edit $MONUMENT_VERSION --title "Monument $MONUMENT_VERSION"
          gh release edit $MONUMENT_VERSION --draft=true

#####################
# BUILD EXECUTABLES #
#####################

  build-release:
    name: Build Release
    needs: ['create-release']
    runs-on: ${{ matrix.os }}
    env:
      # Emit backtraces on panics.
      RUST_BACKTRACE: 1
      MONUMENT_VERSION: ${{ needs.create-release.outputs.monument_version }}
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    strategy:
      matrix:
        build: [linux, macos, windows-64, windows-32]
        include:
        - build: linux
          os: ubuntu-18.04
          target: x86_64-unknown-linux-musl
        - build: macos
          os: macos-latest
          target: x86_64-apple-darwin
        - build: windows-64
          os: windows-2019
          target: x86_64-pc-windows-msvc
        - build: windows-32
          os: windows-2019
          target: i686-pc-windows-msvc

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        profile: minimal
        override: true
        target: ${{ matrix.target }}

    - name: Build release binary
      run: cargo build --verbose --release

      # Run tests, just to make sure that we can't accidentally publish an obviously borked build.
      # This **should** be caught by the PR checks, but better safe than sorry.
    - name: Run tests
      run: cargo test --release

    - name: Strip release binary (linux and macos)
      if: matrix.build == 'linux' || matrix.build == 'macos'
      run: strip "target/release/monument_cli"

    - name: Build archive
      shell: bash
      run: |
        STAGING="monument-$MONUMENT_VERSION-${{ matrix.build }}"
        mkdir -p "$STAGING"

        cp {LICENSE,monument/README.md,monument/cli/guide.md,monument/to-complib.py} "$STAGING/"
        cp -r monument/examples "$STAGING/"

        if [ "${{ matrix.os }}" = "windows-2019" ]; then
          cp "target/release/monument_cli.exe" "$STAGING/monument.exe"
          7z a "$STAGING.zip" "$STAGING"
          echo "ASSET=$STAGING.zip" >> $GITHUB_ENV
        else
          cp "target/release/monument_cli" "$STAGING/monument"
          tar czf "$STAGING.tar.gz" "$STAGING"
          echo "ASSET=$STAGING.tar.gz" >> $GITHUB_ENV
        fi

    - name: Upload release archive
      shell: bash
      run: gh release upload $MONUMENT_VERSION ${{ env.ASSET }}

########################
# UN-DRAFT THE RELEASE #
########################

  publish-release:
    needs: ['create-release', 'publish-crates']
    runs-on: ubuntu-latest
    env:
      MONUMENT_VERSION: ${{ needs.create-release.outputs.monument_version }}
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Remove pre-release tag
      shell: bash
      run: gh release edit $MONUMENT_VERSION --draft=false
